{"version":3,"sources":["workers/searchCriteriaWorker.js"],"names":["self","onmessage","message","restaurants","data","CuisinesHTML","NeighborhoodsHTML","neighborhoods","map","v","i","neighborhood","uniqueNeighborhoods","filter","indexOf","cuisines","cuisine_type","uniqueCuisines","getCuisinesHTML","getNeighborhoodsHTML","postMessage","options","forEach","op","cuisine"],"mappings":";;AACAA,KAAKC,SAAL,GAAiB,UAACC,OAAD,EAAW;AAC3B,KAAIC,cAAcD,QAAQE,IAAR,CAAaD,WAA/B;;AAEA,KAAIE,eAAe,2CAAnB;AACA,KAAIC,oBAAoB,gDAAxB;;AAEA,KAAGH,WAAH,EAAe;AACd;AACM,MAAMI,gBAAgBJ,YAAYK,GAAZ,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,UAAUP,YAAYO,CAAZ,EAAeC,YAAzB;AAAA,GAAhB,CAAtB;AACA;AACA,MAAMC,sBAAsBL,cAAcM,MAAd,CAAqB,UAACJ,CAAD,EAAIC,CAAJ;AAAA,UAAUH,cAAcO,OAAd,CAAsBL,CAAtB,KAA4BC,CAAtC;AAAA,GAArB,CAA5B;;AAEA,MAAMK,WAAWZ,YAAYK,GAAZ,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,UAAUP,YAAYO,CAAZ,EAAeM,YAAzB;AAAA,GAAhB,CAAjB;AACA;AACA,MAAMC,iBAAiBF,SAASF,MAAT,CAAgB,UAACJ,CAAD,EAAIC,CAAJ;AAAA,UAAUK,SAASD,OAAT,CAAiBL,CAAjB,KAAuBC,CAAjC;AAAA,GAAhB,CAAvB;;AAENL,iBAAea,gBAAgBD,cAAhB,CAAf;AACMX,sBAAoBa,qBAAqBP,mBAArB,CAApB;AACN;;AAEDQ,aAAY,EAAC,gBAAgBf,YAAjB,EAAgC,qBAAqBC,iBAArD,EAAZ;AAEA,CAtBD;;AAyBA,IAAIY,kBAAkB,SAAlBA,eAAkB,CAACH,QAAD,EAAc;AACnC,KAAIM,UAAU,2CAAd;AACAN,UAASO,OAAT,CAAiB,mBAAW;AAC3B,MAAIC,wBAAsBC,OAAtB,WAAmCA,OAAnC,cAAJ;AACAH,YAAUA,UAAUE,EAApB;AACA,EAHD;AAIA,QAAOF,OAAP;AACA,CAPD;;AASA,IAAIF,uBAAuB,SAAvBA,oBAAuB,CAACZ,aAAD,EAAmB;AAC7C,KAAIc,UAAU,gDAAd;AACAd,eAAce,OAAd,CAAsB,wBAAgB;AAClC,MAAIC,wBAAsBZ,YAAtB,WAAwCA,YAAxC,cAAJ;AACHU,YAAUA,UAAUE,EAApB;AACA,EAHD;AAIA,QAAOF,OAAP;AACA,CAPD","file":"searchCriteriaWorker.js","sourcesContent":["\r\nself.onmessage = (message)=>{\r\n\tlet restaurants = message.data.restaurants;\r\n\t\r\n\tlet CuisinesHTML = '<option value=\"all\">All Cuisines</option>';\r\n\tlet NeighborhoodsHTML = '<option value=\"all\">All Neighborhoods</option>';\r\n\t\r\n\tif(restaurants){\r\n\t\t// Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        \r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n\r\n\t\tCuisinesHTML = getCuisinesHTML(uniqueCuisines);\r\n        NeighborhoodsHTML = getNeighborhoodsHTML(uniqueNeighborhoods);\r\n\t}\r\n\r\n\tpostMessage({'CuisinesHTML': CuisinesHTML , 'NeighborhoodsHTML': NeighborhoodsHTML});\r\n    \r\n}\r\n\r\n\r\nvar getCuisinesHTML = (cuisines) => {\r\n\tlet options = '<option value=\"all\">All Cuisines</option>';\r\n\tcuisines.forEach(cuisine => {\r\n\t\tlet op = `<option value=${cuisine} > ${cuisine}</option>`;\r\n\t\toptions = options + op;\r\n\t});\r\n\treturn options;\r\n}\r\n\r\nvar getNeighborhoodsHTML = (neighborhoods) => {\r\n\tlet options = '<option value=\"all\">All Neighborhoods</option>';\r\n\tneighborhoods.forEach(neighborhood => {\r\n    \tlet op = `<option value=${neighborhood} > ${neighborhood}</option>`;\r\n\t\toptions = options + op;\r\n\t});\r\n\treturn options;\r\n}"]}