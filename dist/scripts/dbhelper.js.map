{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","isFavorit","callback","url","DATABASE_URL","fetch","then","response","json","undefined","resJson","addAllResturants","catch","allResturnats","id","obj","restaurant","addResturant","error","resturantByID","callbackFailedReviews","cache","addResturantReviews","console","log","e","resturantReviews","getAllPendingReviews","reviewID","review","cuisine","fetchRestaurants","restaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","name","photograph","endsWith","getImageName","imgsList","push","marker","google","maps","Marker","position","latlng","title","urlForRestaurant","animation","Animation","DROP","idb","port"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n\r\n   static get idb_object(){\r\n      return new idb('mws-restaurant-stage-1', 'Restaurants', 1);\r\n   }\r\n\r\n\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    // return `http://localhost:${port}/data/restaurants.json`;\r\n    return 'http://localhost:1337/restaurants/';\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(isFavorit, callback) {\r\n    // let xhr = new XMLHttpRequest();\r\n    // xhr.open('GET', DBHelper.DATABASE_URL);\r\n    // xhr.onload = () => {\r\n    //   if (xhr.status === 200) { // Got a success response from server!\r\n    //     const json = JSON.parse(xhr.responseText);\r\n    //     const restaurants = json.restaurants;\r\n    //     callback(null, restaurants);\r\n    //   } else { // Oops!. Got an error from server.\r\n    //     const error = (`Request failed. Returned status of ${xhr.status}`);\r\n    //     callback(error, null);\r\n    //   }\r\n    // };\r\n    // xhr.send();\r\n\r\n    // let res = allResturnats();\r\n    // if(res){\r\n    //   callback(null,res);\r\n    // }else{\r\n    //   fetch(DBHelper.DATABASE_URL).then(response =>{\r\n    //     if(response){\r\n    //       return response.json();\r\n    //     }else{\r\n    //       return undefined;\r\n    //     }\r\n    //   }).then(resJson => {\r\n    //     addAllResturants(resJson);\r\n    //     callback(null, resJson);\r\n    //   });\r\n    // }\r\n      let url = DBHelper.DATABASE_URL;\r\n      if(isFavorit){\r\n        url = url + `?is_favorite=${isFavorit}`;\r\n      }\r\n\r\n      fetch(url).then(response =>{\r\n        if(response){\r\n          return response.json();\r\n        }else{\r\n          return undefined;\r\n        }\r\n      }).then(resJson => {\r\n        if(resJson){\r\n          if(callback){\r\n            callback(null, resJson);\r\n          }\r\n          addAllResturants(resJson);\r\n        }\r\n      }).catch(error =>{\r\n        if(callback){\r\n          allResturnats(callback);\r\n        }\r\n      });\r\n    \r\n\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    \r\n      fetch(`http://localhost:1337/restaurants/${id}`).then(obj => {\r\n        if(obj){\r\n          return obj.json();\r\n        }else{\r\n          return undefined;\r\n        }\r\n      }).then(restaurant =>{\r\n        if(restaurant){\r\n          if(callback){ callback(null, restaurant);}\r\n          addResturant(id, restaurant);\r\n        }else{\r\n          if(callback){callback(error, null);}\r\n        }\r\n      }).catch((error)=>{\r\n        if(callback){resturantByID(id, callback);}\r\n      });\r\n    \r\n  }\r\n\r\n  static fetchRestaurantReviews(id, callback, callbackFailedReviews) {\r\n    // fetch all restaurants with proper error handling.\r\n\r\n      fetch(`http://localhost:1337/reviews/?restaurant_id=${id}`, {\r\n        cache: 'no-cache'\r\n      }).then(obj => {\r\n        return obj.json();\r\n      }).then(restaurant =>{\r\n        if(restaurant){\r\n          if(callback){\r\n            callback(null, restaurant);\r\n          }\r\n          addResturantReviews(id, restaurant);\r\n        }\r\n      }).catch(e=>{\r\n        console.log('Error during fetching resturant reviews.. ' + e);\r\n        if(callback){\r\n          resturantReviews(id, callback);\r\n        }\r\n        if(callbackFailedReviews){\r\n          getAllPendingReviews(id, callbackFailedReviews);\r\n        }\r\n      });\r\n  }\r\n\r\n  static fetchSingleReview(reviewID, callback, callbackFailedReviews) {\r\n    // fetch all restaurants with proper error handling.\r\n\r\n      fetch(`http://localhost:1337/reviews/${reviewID}`, {\r\n        cache: 'no-cache'\r\n      }).then(obj => {\r\n        return obj.json();\r\n      }).then(review =>{\r\n        if(review){\r\n          if(callback){\r\n            callback(null, review);\r\n          }\r\n          addResturantReviews(reviewID, review, 1);\r\n        }\r\n      }).catch(e=>{\r\n        console.log('Error during fetching review.. ' + e);\r\n        if(callback){\r\n          resturantReviews(id, callback, 1);\r\n        }\r\n        // if(callbackFailedReviews){\r\n        //   getAllPendingReviews(id, callbackFailedReviews);\r\n        // }\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants(undefined, (error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants(undefined, (error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, isFavorit, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants(isFavorit, (error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  static fetchSearchValues(callback){\r\n    DBHelper.fetchRestaurants(undefined, (error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        \r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n\r\n        callback(null, uniqueNeighborhoods, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  // static fetchNeighborhoods(callback) {\r\n  //   // Fetch all restaurants\r\n  //   DBHelper.fetchRestaurants((error, restaurants) => {\r\n  //     if (error) {\r\n  //       callback(error, null);\r\n  //     } else {\r\n  //       // Get all neighborhoods from all restaurants\r\n  //       const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n  //       // Remove duplicates from neighborhoods\r\n  //       const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n  //       callback(null, uniqueNeighborhoods);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  // static fetchCuisines(callback) {\r\n  //   // Fetch all restaurants\r\n  //   DBHelper.fetchRestaurants((error, restaurants) => {\r\n  //     if (error) {\r\n  //       callback(error, null);\r\n  //     } else {\r\n  //       // Get all cuisines from all restaurants\r\n  //       const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n  //       // Remove duplicates from cuisines\r\n  //       const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n  //       callback(null, uniqueCuisines);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n\r\n  static getImageName(restaurant){\r\n    let name = restaurant.photograph;\r\n    if(name && !(name.endsWith('.jpg') || name.endsWith('JPG')) ){\r\n      name = name + '.jpg';\r\n    }\r\n\r\n    return name;\r\n  }\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let name = DBHelper.getImageName(restaurant);\r\n    return (`/images/${name}`);\r\n  }\r\n  \r\n\tstatic imagesUrlForRestaurant(restaurant) {\r\n    let name = DBHelper.getImageName(restaurant);\r\n\t\tvar imgsList = [];\r\n    if(name){\r\n      imgsList.push(`/images/1600/${name}`);\r\n      imgsList.push(`/images/800x600/${name}`);\r\n      imgsList.push(`/images/${name}`);\r\n      imgsList.push(`/images/270x203/${name}`);  \r\n    }else{\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n    }\r\n\t\t\r\n\t\treturn imgsList;\r\n\t}\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}